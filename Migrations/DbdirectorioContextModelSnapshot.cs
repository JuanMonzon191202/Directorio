// <auto-generated />
using System;
using CitasMedicasAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CitasMedicasAPI.Migrations
{
    [DbContext(typeof(DbdirectorioContext))]
    partial class DbdirectorioContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.CentrosMedicosClinica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GrupEspecialidadeId")
                        .HasColumnType("int");

                    b.Property<int?>("IdGupEspecialidad")
                        .HasColumnType("int");

                    b.Property<int?>("IdResponsable")
                        .HasColumnType("int");

                    b.Property<int?>("IdRol")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonalCount")
                        .HasColumnType("int");

                    b.Property<string>("SitioWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GrupEspecialidadeId");

                    b.HasIndex("IdGupEspecialidad");

                    b.HasIndex("IdUsuario");

                    b.ToTable("CentrosMedicosClinicas");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaCita")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<int?>("IdCmc")
                        .HasColumnType("int");

                    b.Property<int?>("IdEspecialista")
                        .HasColumnType("int");

                    b.Property<int?>("IdPaciente")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Citas");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.Especialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.Especialista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cargo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdGupEspecialidad")
                        .HasColumnType("int");

                    b.Property<int?>("IdResponsable")
                        .HasColumnType("int");

                    b.Property<int?>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("NumCedula")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdGupEspecialidad");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Especialistas");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.GrupEspecialidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdCMC")
                        .HasColumnType("int");

                    b.Property<int>("IdEspecialidad")
                        .HasColumnType("int");

                    b.Property<int?>("IdEspecialidadNavigationId")
                        .HasColumnType("int");

                    b.Property<int?>("IdEspecialista")
                        .HasColumnType("int");

                    b.Property<int?>("IdEspecialistaNavigationId")
                        .HasColumnType("int");

                    b.Property<int?>("idCentrosMedicosClinicaNavigationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEspecialidadNavigationId");

                    b.HasIndex("IdEspecialistaNavigationId");

                    b.HasIndex("idCentrosMedicosClinicaNavigationId");

                    b.ToTable("GrupEspecialidades");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FechaNac")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.RolesUsuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NombreRol")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RolesUsuarios");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdRol");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.CentrosMedicosClinica", b =>
                {
                    b.HasOne("CitasMedicasAPI.Data.CitasApiModels.GrupEspecialidade", null)
                        .WithMany("CentrosMedicosClinicas")
                        .HasForeignKey("GrupEspecialidadeId");

                    b.HasOne("CitasMedicasAPI.Data.CitasApiModels.GrupEspecialidade", "GrupEspecialidade")
                        .WithMany()
                        .HasForeignKey("IdGupEspecialidad")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CitasMedicasAPI.Data.CitasApiModels.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GrupEspecialidade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.Especialista", b =>
                {
                    b.HasOne("CitasMedicasAPI.Data.CitasApiModels.GrupEspecialidade", "GrupEspecialidade")
                        .WithMany()
                        .HasForeignKey("IdGupEspecialidad")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CitasMedicasAPI.Data.CitasApiModels.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GrupEspecialidade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.GrupEspecialidade", b =>
                {
                    b.HasOne("CitasMedicasAPI.Data.CitasApiModels.Especialidade", "IdEspecialidadNavigation")
                        .WithMany()
                        .HasForeignKey("IdEspecialidadNavigationId");

                    b.HasOne("CitasMedicasAPI.Data.CitasApiModels.Especialista", "IdEspecialistaNavigation")
                        .WithMany()
                        .HasForeignKey("IdEspecialistaNavigationId");

                    b.HasOne("CitasMedicasAPI.Data.CitasApiModels.CentrosMedicosClinica", "idCentrosMedicosClinicaNavigation")
                        .WithMany()
                        .HasForeignKey("idCentrosMedicosClinicaNavigationId");

                    b.Navigation("IdEspecialidadNavigation");

                    b.Navigation("IdEspecialistaNavigation");

                    b.Navigation("idCentrosMedicosClinicaNavigation");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.Paciente", b =>
                {
                    b.HasOne("CitasMedicasAPI.Data.CitasApiModels.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.Usuario", b =>
                {
                    b.HasOne("CitasMedicasAPI.Data.CitasApiModels.RolesUsuario", "RolesUsuario")
                        .WithMany()
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RolesUsuario");
                });

            modelBuilder.Entity("CitasMedicasAPI.Data.CitasApiModels.GrupEspecialidade", b =>
                {
                    b.Navigation("CentrosMedicosClinicas");
                });
#pragma warning restore 612, 618
        }
    }
}
